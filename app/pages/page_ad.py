# app/pages/page_ad.py
import streamlit as st
from app.services.model_service import qwen_model_base, qwen_model_lora
from app.utils.ad_utils import create_prompt_for_ad
from app.utils.data_loader import get_random_ad

predefined_questions = [
    "–ï—Å—Ç—å –ª–∏ —Ç–æ—Ä–≥ –Ω–∞ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä?",
    "–û–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞.",
    "–ö–∞–∫–∞—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –≥–∞—Ä–∞–Ω—Ç–∏—è?",
    "–í –∫–∞–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ç–æ–≤–∞—Ä?"
]

if "current_question" not in st.session_state:
    st.session_state["current_question"] = None
if "lora_response" not in st.session_state:
    st.session_state["lora_response"] = None
if "base_response" not in st.session_state:
    st.session_state["base_response"] = None
if "selected_ad" not in st.session_state: 
    st.session_state["selected_ad"] = None

def render_ad_page():
    """Renders page for interaction with model finetuned on ads."""
    st.header("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—é")
    if st.button("–í—ã–±—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"):
        selected_ad = get_random_ad()
        st.session_state.selected_ad = selected_ad

    if st.session_state["selected_ad"]:
        ad = st.session_state["selected_ad"]
        st.subheader("–í—ã–±—Ä–∞–Ω–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
        st.markdown(f"**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {ad.get('category_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        st.markdown(f"**–ó–∞–≥–æ–ª–æ–≤–æ–∫:** {ad.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        st.markdown(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {ad.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}")
        st.markdown(f"**–¶–µ–Ω–∞:** {ad.get('price', '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')} —Ä—É–±.")

        st.subheader("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:")
        columns = st.columns(len(predefined_questions))
        question_clicked = None

        for idx, question in enumerate(predefined_questions):
            if columns[idx].button(question):
                question_clicked = question

        if question_clicked:
            prompt_messages = create_prompt_for_ad(ad, question_clicked)
            lora_response = qwen_model_lora.generate_response(prompt_messages)
            base_response = qwen_model_base.generate_response(prompt_messages)

            st.session_state["current_question"] = question_clicked
            st.session_state["lora_response"] = lora_response
            st.session_state["base_response"] = base_response

        if st.session_state["current_question"]:
            st.subheader(f"–í–æ–ø—Ä–æ—Å: **{st.session_state['current_question']}**")

            st.markdown("### üéØ –û—Ç–≤–µ—Ç Finetuned Qwen:")
            st.markdown(f"<div style='border: 2px solid #4CAF50; padding: 10px; border-radius: 10px;'>{st.session_state['lora_response']}</div>", unsafe_allow_html=True)

            st.markdown("### ü§ñ –û—Ç–≤–µ—Ç Base Qwen:")
            st.markdown(f"<div style='border: 2px solid #2196F3; padding: 10px; border-radius: 10px;'>{st.session_state['base_response']}</div>", unsafe_allow_html=True)

        st.subheader("–ò–ª–∏ –∑–∞–¥–∞–π—Ç–µ —Å–≤–æ–π:")
        custom_question = st.text_input("–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å", value="")

        if st.button("–°–ø—Ä–æ—Å–∏—Ç—å"):
            if custom_question:
                prompt_messages = create_prompt_for_ad(ad, custom_question)                
                lora_response = qwen_model_lora.generate_response(prompt_messages)
                base_response = qwen_model_base.generate_response(prompt_messages)

                st.markdown("### üéØ –û—Ç–≤–µ—Ç Finetuned Qwen:")
                st.markdown(f"<div style='border: 2px solid #4CAF50; padding: 10px; border-radius: 10px;'>{lora_response}</div>", unsafe_allow_html=True)

                st.markdown("### ü§ñ –û—Ç–≤–µ—Ç Base Qwen:")
                st.markdown(f"<div style='border: 2px solid #2196F3; padding: 10px; border-radius: 10px;'>{base_response}</div>", unsafe_allow_html=True)
